version: '3.8'

name: bisp-13292

services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "${MONGODB_EXPOSE}:${MONGODB_PORT}"
    volumes:
      - mongodb_data:/data/db
    networks:
      - polyclinic_net
    command: mongod --port ${MONGODB_PORT}

  # Redis service for caching
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "${REDIS_EXPOSE}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    command: --port ${REDIS_PORT}
    networks:
      - polyclinic_net

  # RabbitMQ for message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "${RABBITMQ_EXPOSE_1}:${RABBITMQ_PORT_1}"
      - "${RABBITMQ_EXPOSE_2}:${RABBITMQ_PORT_2}"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/main.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - polyclinic_net

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: polyclinic_backend
    restart: always
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    env_file:
      - ./.env
    ports:
      - "${BACKEND_EXPOSE}:${BACKEND_PORT}"
    volumes:
      - backend_logs:/usr/src/app/logs
    networks:
      - polyclinic_net

  # Frontend service (production)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.prod
  #   container_name: polyclinic_frontend
  #   restart: always
  #   depends_on:
  #     - backend
  #   # No direct port exposure since Nginx will proxy to it
  #   # ports:
  #   #   - "${FRONTEND_EXPOSE}:${FRONTEND_PORT}"
  #   volumes:
  #     - frontend_logs:/var/log/nginx
  #   networks:
  #     - polyclinic_net

  # # Main Nginx reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx_proxy
  #   restart: always
  #   ports:
  #     - "${NGINX_EXPOSE}:${NGINX_PORT}"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/conf.d:/etc/nginx/conf.d
  #     - ./nginx/ssl:/etc/nginx/ssl
  #     - nginx_logs:/var/log/nginx
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - polyclinic_net

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "${PROMETHEUS_EXPOSE}:${PROMETHEUS_PORT}"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - polyclinic_net

  # Visualization with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "${GRAFANA_EXPOSE}:${GRAFANA_PORT}"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    networks:
      - polyclinic_net
    depends_on:
      - prometheus

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: always
    ports:
      - "${LOKI_EXPOSE}:${LOKI_PORT}"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - polyclinic_net

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  backend_logs:
  frontend_logs:
  prometheus_data:
  grafana_data:
  loki_data:
  nginx_logs:

networks:
  polyclinic_net:
    driver: bridge